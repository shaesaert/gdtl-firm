!!python/object:__main__.Mission
name: "simple"
description: "Scenario presented as an example in the RSS2016 paper."
specification: "G (tr(P) < 2) && F ((px > 4) && (py > 4))"
environment :
  bases: {}
  regions :
    A :
      position : [0.5, 0.5, 0]
      color : [0, 1, 0, 1]
      label : A
      label_position : [-0.3, -0.3]
      sides : [1, 1]
      show_dot: False
    B :
      position : [4.5, 4.0, 0]
      color : [0, 0, 1, 1]
      label : B
      label_position : [0.3, 0.3]
      sides : [1, 1]
      show_dot: False
    D1 :
      position : [2.5, 0.75, 0]
      color : [1, 0.4, 0, 1]
      label : D1
      label_position : [0, -0.4]
      sides : [0.5, 1.5]
      show_dot: False
    D2 :
      position : [2.5, 3.75, 0]
      color : [0.25098039,  0.74901961,  1, 1]
      label : D2
      label_position : [0, 0.4]
      sides : [0.5, 1.5]
      show_dot: False
    Obs:
      position : [2.5, 2.25, 0]
      color : [0.4, 0.4, 0.4, 1]
      label : Obs
      label_position : [0.2, -0.4]
      sides : [1, 1.5]
      show_dot: False
  boundary : {limits: [[0, 0], [5, 4.5]], color: [0, 0, 0, 1]}
  directed: False
no_active_vehicles : 1
vehicle_size : 0.2
vehicles :
  Ground1 :
      initial_state: [1, 4, 0]
      initial_covariance: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      motion_model:
        min_linear_velocity: 1 #300
        max_linear_velocity: 10 #800
        max_angular_velocity: 10 #500
        dt: 0.01
        process_noise_covariance : [[0.01, 0, 0], [0, 0.01, 0], [0, 0, 0.05]]
        ROS_control_send_rate: 10
        ROS_control_publisher_name: X80Pro1
        state_label: "x"
        covariance_label: "P"
      observation_model:
        observation_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        noise_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        observation_noise_covariances: [[[1.5, 0, 0], [0, 1.5, 0], [0, 0, 1.5]], [[1.25, 0, 0], [0, 1.25, 0], [0, 0, 1.25]], [[1.0, 0, 0], [0, 1.0, 0], [0, 0, 1.0]], [[0.75, 0, 0], [0, 0.75, 0], [0, 0, 0.75]]]
        cover_map:
          filename: "/home/cristi/Dropbox/work/workspace_linux/PyFIRM/src/data/simple/covermap.txt"
          minimum_number_of_cameras: 2
        output_label: "z"
      color: [1, 0, 0, 1]
      size: 0.1
timestep: 3
simulation:
  loops: 10
  trajectory_file: trajectories.txt
  vehicle_label_position: [0.5, 0.2, 0, 0.3, 0.25, 0]
  video: {file: simple_scenario.mov, interval: 1000}
  figures: {filename_template: "simple_scenario_frame_{frame:03d}.png"}
  loop_figure: "simple_scenario_data.png"
planning:
  seed: 1001
  planning_steps: 100
  planning_time: 300
  sat_probability_threshold: 0.8
  solution_filename: 'transition_system.txt'
  setup:
    nearest_neighbors:
      max_number_of_neighbors: 6
      max_connection_radius: 0.6
    steering_dist_bounds: [0.3, 0.59999]
    controller:
      control_queue_size: 10
      state_weight: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      control_weight: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      norm_covariance_weight: 1.0
      norm_mean_weight: 2.0
      norm_state_weights: 0.66, 0.66, 0.33
      reach_dist:  0.7
    number_monte_carlo_trials: 15
