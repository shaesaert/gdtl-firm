!!python/object:__main__.Mission
name: "BU campus"
description: "Scenario presented as an example in the ? paper."
specification: "G ! Obs(x) > 0
                && G ( F M(x) > 0 && F K(x) > 0 && F A(x) > 0 && F S(x) > 0)
                && G ( (M(x) > 0 || K(x) > 0) => ( (!(B1(x) > 0)) U (A(x)>0 || S(x)>0) ) )
                && G ( (A(x)>0 || S(x)>0) => ( (!(B2(x)>0)) U (M(x)>0 || K(x)>0) ) )
                && G (tr(P) < 0.9)
                && G ( (B1(x)>0 || B2(x)>0) => (tr(P) < 0.6) )"
predicates: '/home/cristi/Dropbox/work/workspace_linux/PyFIRM/src/data/bu/predicates.py'
environment :
  bases: {}
  regions : {}
  boundary : {limits: [[0, 0], [4.87, 3.65]], color: [0, 0, 0, 1]}
  background : '/home/cristi/Dropbox/work/workspace_linux/PyFIRM/src/data/bu/imMap_annot.png'
  directed: False
no_active_vehicles : 1
vehicle_size : 0.2
vehicles :
  Ground1 :
      initial_state: [0.5, 0.5, 0]
      initial_covariance: [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.1]]
      motion_model:
        min_linear_velocity: 0 #300
        max_linear_velocity: 0.2 # 0.4 [m/s]
        max_angular_velocity: 1.047 # pi/3 [rad/s]
        dt: 0.5
        process_noise_covariance : [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.1]]#[[0.3, 0], [0, 0.3]]
        ROS_control_send_rate: 2
        ROS_control_publisher_name: GroundCommandX80Pro2
        state_label: "x"
        covariance_label: "P"
      observation_model:
        observation_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]] #[[1, 0], [0, 1]]
        noise_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]#[[1, 0], [0, 1]]
        observation_noise_covariances: [[[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.01]], [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.01]], [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.01]], [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.01]], [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.01]]]  # [[[100, 0, 0], [0, 100, 0], [0, 0, 100]] ,[[0.8, 0, 0], [0, 0.8, 0], [0, 0, 0.8]], [[0.4, 0, 0], [0, 0.4, 0], [0, 0, 0.4]], [[0.2, 0, 0], [0, 0.2, 0], [0, 0, 0.2]], [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.1]]] #[[[100, 0], [0, 100]] ,[[0.5, 0], [0, 0.5]], [[0.3, 0], [0, 0.3]], [[0.2, 0], [0, 0.2]], [[0.1, 0], [0, 0.1]]] #[[[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]]]
        output_label: "z"
      color: [1, 0, 0, 1]
      size: 0.15
timestep: 3
simulation:
  loops: 10
  trajectory_file: trajectories.txt
  vehicle_label_position: [0.5, 0.2, 0, 0.3, 0.25, 0]
  video: {file: simple_scenario.mov, interval: 1000}
  figures: {filename_template: "simple_scenario_frame_{frame:03d}.png"}
  loop_figure: "simple_scenario_data.png"
planning:
  seed: 1001
  planning_steps: 39
  planning_time: 1200
  sat_probability_threshold: 0.8
  solution_filename: 'transition_system.txt'
  setup:
    nearest_neighbors:
      max_number_of_neighbors: 6
      max_connection_radius: 1.0
    steering_dist_bounds: [0.4, 0.99999]
    controller:
      control_queue_size: 10
      state_weight: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      control_weight: [[1, 0], [0, 1]] #[[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      norm_covariance_weight: 1.0
      norm_mean_weight: 2.0
      norm_state_weights: [0.4, 0.4, 0] #[0.5, 0.5]
      reach_dist:  0.1
    number_monte_carlo_trials: 15
