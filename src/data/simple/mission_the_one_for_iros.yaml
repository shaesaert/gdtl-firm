!!python/object:__main__.Mission
name: "simple"
description: "Scenario presented as an example in the ? paper."
specification: "G ! (box(x, [2.065, 1.77], [0.59, 1.18]) < 1)
                && G F ( (box(x, [0.59, 0.59], [1.18, 1.18]) < 1)
                       && ( ( ! (box(x, [2.065, 2.95], [0.59, 1.18]) < 1) )
                            U (box(x, [3.540, 2.95], [1.18, 1.18]) < 1)
                          )
                       )
                && G F ( (box(x, [3.54, 2.95], [1.18, 1.18]) < 1)
                       && ( ( ! (box(x, [2.065, 0.59], [0.59, 1.18]) < 1) )
                            U (box(x, [0.59, 0.59], [1.18, 1.18]) < 1)
                          )
                       )
                && G (tr(P) < 0.6)
                && G ( ( (box(x, [2.065, 0.59], [0.59, 1.18]) < 1)
                         || (box(x, [2.065, 2.95], [0.59, 1.18]) < 1)
                       ) => (tr(P) < 0.3)
                     )"
environment :
  bases: {}
  regions :
    A :
      position : [0.59, 0.59, 0]
      color : [1, 0, 0, 1]
      label : A
      label_position : [-0.3, -0.3]
      sides : [1.18, 1.18]
      show_dot: False
    B :
      position : [3.54, 2.95, 0]
      color : [0, 1, 0, 1]
      label : B
      label_position : [0.3, 0.3]
      sides : [1.18, 1.18]
      show_dot: False
    D1 :
      position : [2.065, 0.59, 0]
      color : [0, 0, 1, 1]
      label : D1
      label_position : [0, -0.4]
      sides : [0.59, 1.18]
      show_dot: False
    D2 :
      position : [2.065, 2.95, 0]
      color : [0.9568627450980393, 0.6431372549019608, 0.3764705882352941, 1]
      label : D2
      label_position : [0, 0.4]
      sides : [0.59, 1.18]
      show_dot: False
    Obs:
      position : [2.065, 1.77, 0]
      color : [0.4, 0.4, 0.4, 1]
      label : Obs
      label_position : [0, -0.4]
      sides : [0.59, 1.18]
      show_dot: False
  boundary : {limits: [[0, 0], [4.13, 3.54]], color: [0, 0, 0, 1]}
  directed: False
no_active_vehicles : 1
vehicle_size : 0.2
vehicles :
  Ground1 :
      initial_state: [1, 2.5, 0]
      initial_covariance: [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.1]]
      motion_model:
        min_linear_velocity: 0 #300
        max_linear_velocity: 0.4 # 0.4 [m/s]
        max_angular_velocity: 1.047 # pi/3 [rad/s]
        dt: 0.25
        process_noise_covariance : [[0.0001, 0, 0], [0, 0.0001, 0], [0, 0, 0.0001]]#[[0.3, 0], [0, 0.3]]
        ROS_control_send_rate: 4
        ROS_control_publisher_name: GroundCommandX80Pro1
        state_label: "x"
        covariance_label: "P"
      observation_model:
        observation_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]] #[[1, 0], [0, 1]]
        noise_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]#[[1, 0], [0, 1]]
        observation_noise_covariances: [[[100, 0, 0], [0, 100, 0], [0, 0, 100]] ,[[0.005, 0, 0], [0, 0.005, 0], [0, 0, 0.005]], [[0.003, 0, 0], [0, 0.003, 0], [0, 0, 0.003]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.006]], [[0.0005, 0, 0], [0, 0.0005, 0], [0, 0, 0.0005]]] #[[[100, 0], [0, 100]] ,[[0.5, 0], [0, 0.5]], [[0.3, 0], [0, 0.3]], [[0.2, 0], [0, 0.2]], [[0.1, 0], [0, 0.1]]] #[[[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]]]
        cover_map:
          filename: "/home/cristi/Dropbox/cristi/FIRM_CamNetwork/cameraCoverage.txt"
          minimum_number_of_cameras: 2
        output_label: "z"
      color: [1, 0, 0, 1]
      size: 0.1
timestep: 3
simulation:
  loops: 10
  trajectory_file: trajectories.txt
  vehicle_label_position: [0.5, 0.2, 0, 0.3, 0.25, 0]
  video: {file: simple_scenario.mov, interval: 1000}
  figures: {filename_template: "simple_scenario_frame_{frame:03d}.png"}
  loop_figure: "simple_scenario_data.png"
planning:
  seed: 1001
  planning_steps: 26
  planning_time: 1200
  sat_probability_threshold: 0.8
  solution_filename: 'transition_system.txt'
  setup:
    nearest_neighbors:
      max_number_of_neighbors: 6
      max_connection_radius: 1.0
    steering_dist_bounds: [0.6, 0.99999]
    controller:
      control_queue_size: 10
      state_weight: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      control_weight: [[1, 0], [0, 1]] #[[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      norm_covariance_weight: 1.0
      norm_mean_weight: 2.0
      norm_state_weights: [0.4, 0.4, 0] #[0.5, 0.5]
      reach_dist:  0.1 #0.05
    number_monte_carlo_trials: 15
