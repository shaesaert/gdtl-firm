!!python/object:__main__.Mission
name: "Mars mission."
description: "Scenario presented as an example in the ? paper."
#specification: "F ( (A(x) > 0 && E_A(x, m) > 0) && F (A(x) > 0 && E_A(x, m) > 0)
#                    && F (B(x) > 0 && E_B(x, m) > 0) )
#                && ((Obs(x) < 1) U (Done(c) > 0))
#                )"
specification: "F (A(x, m) > 0) && F (B(x, m) > 0)
                && ((Obs(x) < 1) U ((A(x, m) > 0) && (Obs(x) < 1)))
                && ((Obs(x) < 1) U ((B(x, m) > 0) && (Obs(x) < 1)))
                "
predicates: "data/mars/predicates.py"
specification_type: "syntactically co-safe"
environment :
  bases: {}
  regions :
    A1 :
      position : [0.5, 3.1, 0]
      color : [1, 1, 0, 0.5]
      label : A
      label_position : [0, 0]
      sides : [0.6, 0.6]
      show_dot: False
    A2 :
      position : [2.2, 2.0, 0]
      color : [1, 1, 0, 0.5]
      label : A
      label_position : [0, 0]
      sides : [1.2, 0.4]
      show_dot: False
    A3 :
      position : [4.3, 0.5, 0]
      color : [1, 1, 0, 0.5]
      label : A
      label_position : [0, 0]
      sides : [0.6, 0.6]
      show_dot: False
    B1 :
      position : [2.2, 0.4, 0]
      color : [0, 1, 0, 0.5]
      label : B
      label_position : [0, 0]
      sides : [1.2, 0.4]
      show_dot: False
    B2 :
      position : [4.2, 3.1, 0]
      color : [0, 1, 0, 0.5]
      label : B
      label_position : [0, 0]
      sides : [0.8, 0.6]
      show_dot: False
    Obs1:
      position : [1.2, 1.8, 0]
      color : [0.4, 0.4, 0.4, 0.5]
      label : Obs
      label_position : [0, 0]
      sides : [0.4, 2.0]
      show_dot: False
    Obs2:
      position : [2.4, 2.6, 0]
      color : [0.4, 0.4, 0.4, 0.5]
      label : Obs
      label_position : [0, 0]
      sides : [2.0, 0.4]
      show_dot: False
    Obs3:
      position : [4.0, 1.1, 0]
      color : [0.4, 0.4, 0.4, 0.5]
      label : Obs
      label_position : [0, 0]
      sides : [1.6, 0.2]
      show_dot: False
    Shadow:
      position : [0.6, 0.6, 0]
      color : [0.6, 0.6, 0.6, 0.5]
      label : ''
      label_position : [0, 0]
      sides : [1.2, 1.2]
      show_dot: False
  boundary : {limits: [[0, 0], [4.8, 3.6]], color: [0, 0, 0, 1]}
#  background : 'path_to_image.png'
  directed: False
no_active_vehicles : 2
vehicle_size : 0.2
map_resolution: 0.2 # common parameter for all vehicles
vehicles :
  Ground1 :
      initial_state: [0.5, 0.5, 0]
      initial_covariance: [[0.1, 0, 0], [0, 0.1, 0], [0, 0, 0.1]]
      motion_model:
        min_linear_velocity: 0 #300
        max_linear_velocity: 0.2 # 0.4 [m/s]
        max_angular_velocity: 1.047 # pi/3 [rad/s]
        dt: 0.5
        process_noise_covariance : [[0.0001, 0, 0], [0, 0.0001, 0], [0, 0, 0.0001]]
        ROS_control_send_rate: 2
        ROS_control_publisher_name: GroundCommandX80Pro2
        state_label: "x"
        covariance_label: "P"
        map_label: "m"
        collect_label: "c"
      observation_model:
        observation_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        noise_jacobian: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        observation_noise_covariances: [[[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]], [[0.001, 0, 0], [0, 0.001, 0], [0, 0, 0.001]]]
        output_label: "z"
      color: [1, 0, 0, 1]
      size: 0.15
  Copter1 :
      initial_state: [1, 1, 0, 0] # x, y, z, yaw
timestep: 3
simulation:
  loops: 10
  trajectory_file: trajectories.txt
  vehicle_label_position: [0.5, 0.2, 0, 0.3, 0.25, 0]
  video: {file: simple_scenario.mov, interval: 1000}
  figures: {filename_template: "simple_scenario_frame_{frame:03d}.png"}
  loop_figure: "simple_scenario_data.png"
planning:
  seed: 2003
  planning_steps: 10
  planning_time: 1200
  sat_probability_threshold: 0.8
  solution_filename: 'transition_system_{}.txt'
  setup:
    nearest_neighbors:
      max_number_of_neighbors: 6
      max_connection_radius: 1.0
    steering_dist_bounds: [0.2, 0.99999]
    controller:
      control_queue_size: 10
      state_weight: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      control_weight: [[1, 0], [0, 1]] #[[1, 0, 0], [0, 1, 0], [0, 0, 1]]
      norm_covariance_weight: 1.0
      norm_mean_weight: 2.0
      norm_state_weights: [0.4, 0.4, 0] #[0.5, 0.5]
      reach_dist:  0.1
    number_monte_carlo_trials: 15
